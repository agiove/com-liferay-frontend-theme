import com.liferay.gradle.plugins.node.tasks.PublishNodeModuleTask
import com.liferay.gradle.util.copy.StripPathSegmentsAction

configurations {
	alloyUI
	fontAwesome
}

task buildAlloyUITheme(type: Copy)
task buildClay(type: Copy)
task buildClayFonts(type: Copy)
task buildClayIcons(type: Copy)
task buildFontAwesome(type: Copy)
task buildTheme
task publishNodeModule(type: PublishNodeModuleTask)

String alloyUIVersion = "3.1.0-deprecated.23"
String fontAwesomeVersion = "3.2.1"

File themeDestinationDir = file("src/main/resources/META-INF/resources/_unstyled");

buildAlloyUITheme {
	File alloyThemeDestinationDir = new File(themeDestinationDir, "images/aui")

	doFirst {
		delete alloyThemeDestinationDir
	}

	eachFile new StripPathSegmentsAction(5)

	filesMatching "**/build/aui-*/assets/skins/sam/", new StripPathSegmentsAction(5)
	filesMatching "**/build/aui-skin-deprecated/images/", new StripPathSegmentsAction(3)

	from {
		zipTree(configurations.alloyUI.singleFile)
	}

	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-*/assets/skins/sam/**.gif"
	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-*/assets/skins/sam/**.jpg"
	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-*/assets/skins/sam/**.png"
	include "META-INF/resources/webjars/alloy-ui/${alloyUIVersion}/build/aui-skin-deprecated/images/"

	includeEmptyDirs = false
	into alloyThemeDestinationDir
}

buildCSS {
	dependsOn buildTheme
}

buildClay {
	dependsOn npmInstall

	File clayDestinationDir = new File(themeDestinationDir, "css/clay")

	doFirst {
		delete clayDestinationDir
	}

	eachFile {
		if (name in ["atlas.scss", "bootstrap.scss", "base.scss"]) {
			filter {
				String line ->

				if (line == "// INSERT CUSTOM EXTENSIONS") {
					line = """\
@import \"variables\";

@import \"../liferay_variables_custom\";
@import \"../liferay_variables\";
@import \"bourbon\";
@import \"../clay_custom\";
@import \"../liferay_custom\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import url(font-awesome.css);
@import \"../clay_variables\";"""
				}

				return line
			}
		}
		else if (name in ["atlas-variables.scss", "base-variables.scss"]) {
			filter {
				String line ->

				if (line == "// INSERT CUSTOM BASE VARS") {
					line = """\
@import \"../clay_variables\";"""
				}
				else if (line == "// INSERT CUSTOM VARS") {
					line = """\
@import \"variables\";

@import \"../liferay_variables_custom\";
@import \"../liferay_variables\";"""
				}

				return line
			}
		}
	}

	eachFile new StripPathSegmentsAction(3)

	from npmInstall.nodeModulesDir
	include "clay/src/scss/"
	includeEmptyDirs = false
	into clayDestinationDir
}

buildClayFonts {
	dependsOn npmInstall

	File clayFontsDestinationDir = new File(themeDestinationDir, "css/clay/fonts")

	dependsOn buildClay

	doFirst {
		delete clayFontsDestinationDir
	}

	eachFile new StripPathSegmentsAction(3)

	from npmInstall.nodeModulesDir
	include "clay/release/fonts/"
	includeEmptyDirs = false
	into clayFontsDestinationDir
}

buildClayIcons {
	dependsOn npmInstall

	File clayIconsDestinationDir = new File(themeDestinationDir, "images/clay")

	doFirst {
		delete clayIconsDestinationDir
	}

	eachFile new StripPathSegmentsAction(4)

	from npmInstall.nodeModulesDir
	include "clay/build/images/icons/"
	includeEmptyDirs = false
	into clayIconsDestinationDir
}

buildFontAwesome {
	File fontAwesomeDestinationDir = new File(themeDestinationDir, "css/font-awesome")

	doFirst {
		delete fontAwesomeDestinationDir
	}

	eachFile new StripPathSegmentsAction(5)

	from {
		zipTree(configurations.fontAwesome.singleFile)
	}

	include "META-INF/resources/webjars/font-awesome/${fontAwesomeVersion}/scss/**.scss"
	include "META-INF/resources/webjars/font-awesome/${fontAwesomeVersion}/font/**"

	includeEmptyDirs = false
	into fontAwesomeDestinationDir
}

buildTheme {
	dependsOn buildAlloyUITheme
	dependsOn buildClayFonts
	dependsOn buildClayIcons
	dependsOn buildFontAwesome
}

classes {
	dependsOn buildTheme
}

dependencies {
	alloyUI group: "com.liferay.webjars", name: "com.liferay.webjars.alloy-ui", transitive: false, version: alloyUIVersion

	fontAwesome group: "org.webjars", name: "font-awesome", transitive: false, version: fontAwesomeVersion
}

publishNodeModule {
	dependsOn jar
	workingDir = "src/main/resources/META-INF/resources/_unstyled"
}